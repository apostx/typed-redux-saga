/* This file is generated. Do not edit it. */

/* eslint-disable @typescript-eslint/no-unsafe-return */
/* eslint-disable functional/functional-parameters */
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
/* eslint-disable @typescript-eslint/no-unsafe-argument */
/* eslint-disable prettier/prettier */
{% set effects = [
  'take',
  'takeMaybe',
  'takeEvery',
  'takeLatest',
  'takeLeading',
  'put',
  'putResolve',
  'call',
  'apply',
  'cps',
  'fork',
  'spawn',
  'join',
  'cancel',
  'select',
  'actionChannel',
  'flush',
  'cancelled',
  'setContext',
  'getContext',
  'delay',
  'throttle',
  'debounce',
  'retry'
] %}
{% set combinatorEffects = [
  'all',
  'race'
] %}
import {
  {% for effect in effects %}
  {{ effect }} as raw{{ (effect.slice(0, 1) | upper) ~ effect.slice(1) }},
  {%- endfor %}
  {% for effect in combinatorEffects %}
  {{ effect }} as raw{{ (effect.slice(0, 1) | upper) ~ effect.slice(1) }},
  {%- endfor %}
} from "redux-saga/effects";

function* wrapEffect(effect, ...args) {
  return yield effect(...args);
}
{% for effect in effects %}
export function {{ effect }}(...args) {
  const effect = wrapEffect(raw{{ (effect.slice(0, 1) | upper) ~ effect.slice(1) }}, ...args);
  effect.isWrapped = true;
  return effect;
}
{% endfor %}
function unwrapEffect(effect) {
  if (effect?.isWrapped) {
    const { value } = effect.next();
    return value;
  }
  return effect;
}

function unwrapEffects(effects) {
  if (Array.isArray(effects)) {
    return effects.map(unwrapEffect);
  }
  const result = {};
  for (const [key, value] of Object.entries(effects)) {
    result[key] = unwrapEffect(value);
  }
  return result;
}
{% for effect in combinatorEffects %}
export function {{ effect }}(effects) {
  const effect = wrapEffect(raw{{ (effect.slice(0, 1) | upper) ~ effect.slice(1) }}, unwrapEffects(effects));
  effect.isWrapped = true;
  return effect;
}
{% endfor %}